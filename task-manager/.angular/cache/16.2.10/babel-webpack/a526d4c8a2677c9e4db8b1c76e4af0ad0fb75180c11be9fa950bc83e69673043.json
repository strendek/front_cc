{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let SharedService = /*#__PURE__*/(() => {\n  class SharedService {\n    constructor() {\n      this.showViewUsers = new BehaviorSubject(false);\n      this.showAddUser = new BehaviorSubject(false);\n      this.showViewTasks = new BehaviorSubject(false);\n      this.showAddTask = new BehaviorSubject(false);\n      this.currentValueOne = this.showViewUsers.asObservable();\n      this.currentValueTwo = this.showAddUser.asObservable();\n      this.currentValueThree = this.showViewTasks.asObservable();\n      this.currentValueFour = this.showAddTask.asObservable();\n    }\n    viewUsersClicked() {\n      this.showViewUsers.next(true);\n      this.showAddUser.next(false);\n      this.showViewTasks.next(false);\n      this.showAddTask.next(false);\n    }\n    addUserClicked() {\n      this.showViewUsers.next(false);\n      this.showAddUser.next(true);\n      this.showViewTasks.next(false);\n      this.showAddTask.next(false);\n    }\n    viewTasksClicked() {\n      this.showViewUsers.next(false);\n      this.showAddUser.next(false);\n      this.showViewTasks.next(true);\n      this.showAddTask.next(false);\n    }\n    addTaskClicked() {\n      this.showViewUsers.next(false);\n      this.showAddUser.next(false);\n      this.showViewTasks.next(false);\n      this.showAddTask.next(true);\n    }\n    static #_ = this.ɵfac = function SharedService_Factory(t) {\n      return new (t || SharedService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SharedService,\n      factory: SharedService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SharedService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}